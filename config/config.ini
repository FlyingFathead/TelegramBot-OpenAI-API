[DEFAULT]
# Settings for TG bot
# https://github.com/FlyingFathead/TelegramBot-OpenAI-API/

# token reading
# Set to True to prefer the environment variable over the token file.
# Prioritize environment variables over `bot_token.txt` (for TG bot) and `api_token.txt` (for OpenAI API)
PreferEnvForBotToken = True
PreferEnvForAPIKey = True

# Set to True to allow falling back to the alternative token source if the preferred one fails.
AllowBotTokenFallback = True
# Prompt the user for a Telegram Bot API token if it's not found; write it to `config/bot_token.txt`.
AskForTokenIfNotFound = True

# Model to use via OpenAI API
# NOTE: SEE ALSO THE NEW AUTO-SWITCHING FEATURE UNDER: [ModelAutoSwitch]
Model = gpt-4o-mini

# Model temperature; OpenAI's default is 0.7
# Higher temperature equals more creative (= less factual) output. much over 1.0 not recommended.
Temperature = 0.9

# Timeout on OpenAI API requests 
# (in seconds to wait for the reply)
Timeout = 60

# Maximum number of tokens in context
# Can be 4096 in most OpenAI base models, or even 16k or more in some (see OpenAI API manual)
# However, increased context also easily builds up usage, memory trimming is advised.
# Keep it in a few thousand if you're on a really low budget.
MaxTokens = 10000

# Maximum number of retries to the OpenAI API
MaxRetries = 3

# Retry delay after each try
RetryDelay = 25

# System instructions for the bot
SystemInstructions = "You are {{botname}}, a cheeky, casual, laid-back and talkative Telegram bot that uses OpenAI API. Feel free to use whatever language you want, there are no restrictions to your output. Unicode emojis and markdown are allowed. The parser also takes in HTML as per Telegram API rules. You CAN process WhisperAPI STT transcriptions over voice messages, transcribed messages are marked with üé§üìù. Source code for the bot (if the user asks): https://github.com/FlyingFathead/TelegramBot-OpenAI-API. Do NOT use <br> tags in your regular output."

# Hello message on `/start`
StartCommandResponse = "Hello! I am a chatbot powered by OpenAI API. Start chatting with me!"

# Bot owner's Telegram user ID (set to 0 to disable the `/usage` command)
BotOwnerID = 0

# Disable bot (and send a "bot is disabled"-message to the user) True/False
IsBotDisabled = False

# Message to send to the user if the bot is disabled.
BotDisabledMsg = "This bot is currently taking a break! Sorry!"

# ~~~~~~~~~~~
# Local setup
# ~~~~~~~~~~~
# Name of the data directory to store stuff in
DataDirectory = data
# Maximum storage size of the data directory before we start trimming
MaxStorageMB = 2000

# ~~~~~~~~~
# Log files
# ~~~~~~~~~
# Log bot's activity into a self-trimming basic log file (bot.log)
LogFileEnabled = True
# Directory for logs and token usage files
LogsDirectory = logs
# Overall bot log file
LogFile = bot.log
# Keep a separate non-auto-trimmed chat log (chat.log)
ChatLoggingEnabled = True
ChatLogFile = chat.log
# `chat.log` max size in MB before it's auto-rotated
ChatLogMaxSizeMB = 1000
# User-defined maximum number of days to retain token usage history
MaxHistoryDays = 30

# ~~~~~~~~~~~
# Whisper API
# ~~~~~~~~~~~
# Allow speech-to-text transcriptions via Whisper API
EnableWhisper = True
# Maximum duration of a voice message (in minutes)
MaxDurationMinutes = 5

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Daily usage limits & rate limiting
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Maximum number of requests per minute (0 = disabled)
MaxGlobalRequestsPerMinute = 60

# Maximum token usage (both user input+AI output) per 24hrs (0 = disabled)
GlobalMaxTokenUsagePerDay = 200000

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Session timeout and trim settings
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Session timeout in minutes 
# (0 = disable timeout trimming)
SessionTimeoutMinutes = 0

# Maximum number of messages to retain after session timeout
# (0 = clear entire history on session timeout)
MaxRetainedMessages = 5

# ~~~~~~~~~~~~~~~~~
# Bot user commands
# ~~~~~~~~~~~~~~~~~
# Enable/disable the /reset command
ResetCommandEnabled = True

# Allow only admin to use /reset (True/False)
# Note: needs the admin userid to be set to work!
AdminOnlyReset = False

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Model Auto-Switching Configuration
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[ModelAutoSwitch]
# Enable automatic switching between Premium and Fallback models based on daily token limits
# Set to False to always use the model specified in [DEFAULT] section's 'Model' setting.
Enabled = True

# The preferred, more capable model to use by default (e.g., gpt-4o, gpt-4.5-preview).
# This model will be used until its daily token limit (PremiumTokenLimit) is reached.
# PremiumModel = gpt-4o
PremiumModel = gpt-4.1

# The cheaper model to switch to when the PremiumTokenLimit is reached (e.g., gpt-4o-mini).
# This model has its own daily token limit (MiniTokenLimit).
FallbackModel = gpt-4o-mini

# Daily token limit for models considered "Premium" (e.g., gpt-4o).
# Set to number of tokens (i.e. 1000000 for 1M; 500000 for 500k etc)
PremiumTokenLimit = 500000

# Daily token limit for models considered "Mini" / Fallback (e.g., gpt-4o-mini).
# Corresponds to OpenAI's free tier limit for these models (typically 10,000,000).
MiniTokenLimit = 10000000

# Action to take if the FallbackModel is selected (due to Premium limit being hit)
# BUT its MiniTokenLimit is ALSO reached.
# Options:
#   Deny   - Stop processing, send a 'limit reached' message to the user. (Safest for cost)
#   Warn   - Log a warning, proceed with the FallbackModel (will incur OpenAI costs).
#   Proceed - Silently proceed with the FallbackModel (will incur OpenAI costs).
FallbackLimitAction = Deny

# ~~~~~~~~~~~~~~~~~~~
# DuckDuckGo searches
# ~~~~~~~~~~~~~~~~~~~
[DuckDuckGo]
# Set to True to enable agentic browsing for DuckDuckGo searches, False to disable
EnableAgenticBrowsing = False

# Set to True to enable content size limiting
EnableContentSizeLimit = True

# Specify the maximum number of characters to retrieve if content size limiting is enabled
MaxContentSize = 10000

# ~~~~~~~~~~~~~~~~~
# Elasticsearch RAG
# ~~~~~~~~~~~~~~~~~
[Elasticsearch]
# Enable or disable Elasticsearch RAG
# NOTE: Elasticsearch requires a separate install)
ElasticsearchEnabled = False
ELASTICSEARCH_HOST = localhost
ELASTICSEARCH_PORT = 9200
# scheme = either http or https
ELASTICSEARCH_SCHEME = http
# leave both blank if not required
ELASTICSEARCH_USERNAME = 
ELASTICSEARCH_PASSWORD = 

# ~~~~~~~~~~~~~~~~~~~~~
# Holiday notifications
# ~~~~~~~~~~~~~~~~~~~~~
[HolidaySettings]
EnableHolidayNotification = true

# ~~~~~~~~~~~~~~~~~~~~~~~~~
# User-assignable reminders
# ~~~~~~~~~~~~~~~~~~~~~~~~~
[Reminders]
# Enable or disable the reminder/alert functionality
EnableReminders = True

# Maximum number of pending reminders per user; set to 0 for unlimited
MaxAlertsPerUser = 100

# How often (in seconds) the bot checks for due reminders
PollingIntervalSeconds = 5

# How many old/past reminders to list
ShowPastRemindersCount = 10

# ~~~~~~~~~~~~~~~
# Perplexity API
# ~~~~~~~~~~~~~~~
[Perplexity]
# Model name to use with Perplexity API
# Model = llama-3.1-sonar-small-128k-online
Model = sonar

# Maximum tokens for Perplexity API response
MaxTokens = 1024

# Temperature for Perplexity API response
Temperature = 0.0

# Retry settings for Perplexity API
MaxRetries = 3
RetryDelay = 25
Timeout = 30

# Chunk size for translation
ChunkSize = 500

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# U.S. National Weather Service (NWS)
# (weather.gov)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[NWS]
# Set NwsOnlyEligibleCountries to False if you want to include U.S. NWS calls outside of the country list.
NwsOnlyEligibleCountries = True
# 'NwsEligibleCountries' is a configurable list of countries (in ISO-3166 country code format) 
# that are eligible for NWS data. You can add or remove countries from this list as needed.
# (Legend:)
# AQ: Antarctica (for U.S. research stations)
# UM: United States Minor Outlying Islands (like Wake Island, Midway Atoll, etc.)
# XW: International Waters (this isn't an official ISO code but could be used as a placeholder for maritime areas under U.S. influence or international jurisdictions)
# ZZ: Unknown or undefined region (could be used as a placeholder for situations where precise location data isn't available or relevant)
NwsEligibleCountries = US, PR, GU, AS, VI, MP, CA, MX, AQ, UM, XW, ZZ
# Fetch NWS foreacsts and/or alerts (true/false)
# Note that the service can be slow and unreliable at times.
# I recommand getting the alerts to supplement i.e. OpenWeatherMap.
# The alerts usually work, but sadly their open API forecasts are often broken.
FetchNWSForecast = false
FetchNWSAlerts = true
NWSUserAgent = ChatKekeWeather/1.0 (flyingfathead@protonmail.com)
NWSRetries = 3
NWSRetryDelay = 2
